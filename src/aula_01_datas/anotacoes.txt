Reposit√≥rio do professor:
https://github.com/marceltanuri/1322-java-tecnicas-programacao

Slide das aulas:
https://marceltanuri.github.io/1322-java-tecnicas-programacao/

para ver a aula especifica:
https://marceltanuri.github.io/1322-java-tecnicas-programacao/aula1/

Antes do java 8 era utilizado java.util.Date e java.util.Calendar que tinham limita√ß√µes.

C√≥digos que serve de base para construir outros codigos, api, bibliotecas.
Fazem um uso bem cuidadoso de boas praticas como solid.


java.time renovou isso.

üìå Anota√ß√µes: Principais Classes do java.time
üïí Classes Fundamentais
LocalDate ‚Üí Representa uma data sem hor√°rio.
LocalTime ‚Üí Representa apenas um hor√°rio.
LocalDateTime ‚Üí Combina data e hor√°rio.
ZonedDateTime ‚Üí Inclui fuso hor√°rio.
Period ‚Üí Calcula diferen√ßa entre datas em anos, meses e dias.
Duration ‚Üí Mede tempo entre instantes (horas, minutos, segundos).


LocalDate gera um TimesTemp, e aquela numera√ß√£o toda na verdade s√£o os milisegundos de um tempo at√© o outro

√© muito comum usar datas com timestamp varios numeros que representam datas inteiras.

Instant timestamp = Instant.now();
System.out.println("Timestamp (Instant): " + timestamp);
System.out.println("Milissegundos desde 1970: " + timestamp.toEpochMilli());

Timestamp (Instant): 2025-03-07T23:09:47.133454700Z
Milissegundos desde 1970: 1741388987133

----------

Classe LocalDate nao da para fazer um new porque nao tem construtor
Ela √© final mas final apenas nao deixa herdarem de LocalDate, ainda seria possivel instanciar.

o construtor √© privado, ent√£o bloqueia instancia√ß√£o.



.now de localdate √© uma metodo proprio
.now de localtime tamb√©m √© proprio, n√£o √© polimorfismo

java roda dentro da jvm, que pode ser configurada em um fuso horario diferente
entao o .now que pega systemdefault horario depende disso e nao do computador do usuario em si.

.now de localdate e das outras bibliotecas, √© o criador do objeto localdate.

now √© static

LocalDate date = LocalDate.now();

date.getDayOfWeek
